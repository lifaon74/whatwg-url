import { DynamicArrayBufferView, CompareResult } from './DynamicArrayBufferView.ts-0a580694d6c0193e5dba6c59d83a6af9a64c4f194b169403dda3ec780abfaf42';
export declare type StringViewArrayBufferType = Uint8Array | Uint16Array | Uint32Array;
export declare type StringViewInput = StringView | DynamicArrayBufferView<StringViewArrayBufferType> | StringViewArrayBufferType | string;
export declare type StringViewBytesPerChar = 1 | 2 | 4;
export declare class StringView extends DynamicArrayBufferView<StringViewArrayBufferType> {
    static trimChars: Uint16Array;
    static lowerCase(codePoint: number): number;
    static upperCase(codePoint: number): number;
    static isWhiteChar(codePoint: number): boolean;
    protected _bytesPerChar: StringViewBytesPerChar;
    constructor(input?: StringViewInput, bytesPerChar?: StringViewBytesPerChar);
    string: string;
    bytesPerChar: StringViewBytesPerChar;
    set(input: StringViewInput, bytesPerChar?: StringViewBytesPerChar): this;
    charAt(index: number): number;
    charAt(index: number, returnType: 'string'): string;
    charAt(index: number, returnType: 'number'): number;
    setAt(index: number, value: number | string): this;
    compact(): this;
    push(value: number | string): this;
    pop(): number;
    pop(returnType: 'string'): string;
    pop(returnType: 'number'): number;
    append(input: StringViewInput): this;
    subtract(input: StringView | StringViewArrayBufferType): StringView;
    unshift(value: number | string): this;
    shift(): number;
    shift(returnType: 'string'): string;
    shift(returnType: 'number'): number;
    prepend(input: StringViewInput): this;
    presubtract(input: StringView | StringViewArrayBufferType): StringView;
    expand(offset: number, shift: number, fillWith?: (string | number | null)): this;
    concat(input: StringView | StringViewArrayBufferType): StringView;
    fill(value: number | string, start?: number, end?: number): this;
    slice(start?: number, end?: number): StringView;
    subarray(start?: number, end?: number): StringView;
    repeat(count: number): StringView;
    trimLeft(): this;
    trimRight(): this;
    trim(): this;
    padStart(length: number, input?: StringViewInput): this;
    padEnd(length: number, input?: StringViewInput): this;
    indexOf(value: number | string, offset?: number): number;
    indexOfSequence(input: StringViewInput, offset?: number): number;
    includes(value: number | string, offset?: number): boolean;
    includesSequence(input: StringViewInput, offset?: number): boolean;
    substr(start: number, length?: number): StringView;
    substring(start: number, end?: number): StringView;
    split(separator: string | RegExp, limit?: number): StringView[];
    toLowerCase(): void;
    toUpperCase(): void;
    compare(input: StringViewInput): CompareResult;
    equals(input: StringViewInput): boolean;
    greaterThan(input: StringViewInput): boolean;
    greaterThanOrEquals(input: StringViewInput): boolean;
    lessThan(input: StringViewInput): boolean;
    lessThanOrEquals(input: StringViewInput): boolean;
    startsWith(input: StringViewInput, position?: number): boolean;
    endsWith(input: StringViewInput, position?: number): boolean;
    clone(): StringView;
    toString(): string;
    valueOf(): string;
    [Symbol.toPrimitive](type: any): string;
    readonly [Symbol.toStringTag]: string;
    private _whiteSpaceLeft();
    private _whiteSpaceRight();
}
